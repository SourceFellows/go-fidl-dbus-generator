// Code generated by Go-Fidl-Generator. DO NOT EDIT.
// see https://github.com/SourceFellows/go-fidl-dbus-generator
{{ $ImplementationName := printf "%s%s" (nameify .InterfaceInfo.Name) "Sender" -}}
{{ $fqInterfaceName := print .PackageInfo.Name "." .InterfaceInfo.Name -}}
package {{extractLastPartOfName .TargetPackage}}

import (
	{{if .Broadcasts }}"fmt" {{end}}
	"context"
	"github.com/godbus/dbus/v5"
)

type {{exportNameOf $ImplementationName}} interface {
    {{range .Methods}}
    {{exportNameOf .Name}} {{"(ctx context.Context, " -}}
        {{- $paramCountIn := len .In}}
        {{- $paramCountOut := len .Out}}
        {{- range $idx, $param := .In -}}
        {{nameify $param.Name}} {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountIn}},{{end -}}
        {{- end}} {{") (" -}}
        {{- range $idx, $param := .Out -}}
        {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountOut}},{{end -}}
        {{end -}} {{ "error)" -}}
    {{end}}
    {{range .Broadcasts}}
        {{if .IsSelective}}
            Send{{exportNameOf .Name}}Signal {{"(target dbus.Destination, " -}}
            {{- $paramCountIn := len .Out}}
            {{- range $idx, $param := .Out -}}
            {{nameify $param.Name}} {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountIn}},{{end -}}
            {{- end}} {{")  error" -}}
        {{ else -}}
            Send{{exportNameOf .Name}}Signal {{"(" -}}
            {{- $paramCountIn := len .Out}}
            {{- range $idx, $param := .Out -}}
            {{nameify $param.Name}} {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountIn}},{{end -}}
            {{- end}} {{")  error" -}}
		{{ end -}}
	{{end}}

    {{range .Attributes}}
        Get{{exportNameOf .Name}} {{"(ctx context.Context) (" -}} {{if .IsArray}}[]{{end}}{{goType .Type}} {{", error)" -}}
    {{end}}

	Close() error
}

func New{{exportNameOf $ImplementationName}}(dest, path string) (*{{$ImplementationName}}, error) {

    conn, err := dbus.ConnectSessionBus()
    if err != nil {
        return nil, err
    }

    broadcastMatchOptions := []dbus.MatchOption{
        dbus.WithMatchObjectPath(dbus.ObjectPath(path)),
        dbus.WithMatchInterface("{{$fqInterfaceName}}"),
    }

    return &{{$ImplementationName}}{
        dbusConnection: conn,
        destination: dest,
        path: dbus.ObjectPath(path),
        broadcastMatchOptions: broadcastMatchOptions,
    },nil
}

type {{$ImplementationName}} struct {
    dbusConnection          *dbus.Conn
    destination             string
    path                    dbus.ObjectPath
    broadcastMatchOptions   []dbus.MatchOption
}

func (impl *{{$ImplementationName}}) Close() error {
    return impl.dbusConnection.Close()
}

{{range .Methods}}

    func (impl *{{$ImplementationName}}) {{exportNameOf .Name}} {{"(ctx context.Context, " -}}
    {{- $paramCountIn := len .In}}
    {{- $paramCountOut := len .Out}}

    {{- range $idx, $param := .In -}}
        {{nameify $param.Name}} {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountIn}},{{end -}}
    {{- end}} {{") (" -}}
    {{- range $idx, $param := .Out -}}
        {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountOut}},{{end -}}
    {{end -}} error) {

        {{range $idx, $param := .Out -}}
            var {{goType $param.Name}} {{if $param.IsArray}}[]{{end}}{{goType $param.Type}}
        {{end}}

    	err := impl.dbusConnection.Object(impl.destination, impl.path).
    		CallWithContext(ctx, "{{$fqInterfaceName}}.{{.Name}}{{"\"" -}}
    		, {{if .FireAndForget}}dbus.FlagNoReplyExpected{{else}}0{{end}}
    		{{- range $idx, $param := .In -}}
                , {{nameify $param.Name -}}
            {{- end}}).
    		Store(
    		{{- range $idx, $param := .Out -}}
              &{{goType $param.Name}}  {{if $idx = $paramCountOut}},{{end -}}
            {{end -}}
    		)

    	if err != nil {
    		return {{ range $idx, $param := .Out -}}
                      {{goType $param.Name}}  {{if $idx = $paramCountOut}},{{end -}}
                   {{end -}} err
    	}

        return {{ range $idx, $param := .Out -}}
             {{goType $param.Name}}  {{if $idx = $paramCountOut}},{{end -}}
       {{end -}}
       nil
    }
{{end}}

{{range .Broadcasts}}

    {{if .IsSelective}}
        func (impl *{{$ImplementationName}}) Send{{exportNameOf .Name}}Signal {{"(target dbus.Destination, " -}}
        {{- $paramCountIn := len .Out}}

        {{- range $idx, $param := .Out -}}
            {{nameify $param.Name}} {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountIn}},{{end -}}
        {{- end}} {{")  error {" }}

            name := fmt.Sprintf("%s.%s", "{{$fqInterfaceName}}", "{{.Name}}")
            err := impl.dbusConnection.EmitWithDestination(impl.path, name, target
            {{- range $idx, $param := .Out -}}
                , {{nameify $param.Name -}}
            {{- end}})
            if err != nil {
                return fmt.Errorf("error occurred while sending signal: %w", err)
            }

            return nil

        }
    {{else}}
        func (impl *{{$ImplementationName}}) Send{{exportNameOf .Name}}Signal {{"(" -}}
        {{- $paramCountIn := len .Out}}

        {{- range $idx, $param := .Out -}}
            {{nameify $param.Name}} {{if $param.IsArray}}[]{{end}}{{goType $param.Type}} {{if $idx = $paramCountIn}},{{end -}}
        {{- end}} {{")  error {" }}

            name := fmt.Sprintf("%s.%s", "{{$fqInterfaceName}}", "{{.Name}}")
            err := impl.dbusConnection.Emit(impl.path, name
            {{- range $idx, $param := .Out -}}
                , {{nameify $param.Name -}}
            {{- end}})
            if err != nil {
                return fmt.Errorf("error occurred while sending signal: %w", err)
            }

            return nil

        }
    {{end}}

{{end}}

{{range .Attributes}}
    func (impl *{{$ImplementationName}}) Get{{exportNameOf .Name}} {{"(ctx context.Context) (" -}} {{if .IsArray}}[]{{end}}{{goType .Type}} {{", error) {" -}}

        var result {{if .IsArray}}[]{{end}}{{goType .Type}}

        err := impl.dbusConnection.Object(impl.destination, impl.path).
        CallWithContext(ctx, "{{$fqInterfaceName}}.get{{.Name}}{{"Attribute\"" -}}
		, 0).
        Store(&result)

	    return result, err
    }
{{end}}
